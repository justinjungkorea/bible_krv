{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","book","chapter","verseS","verseE","view","bookData","verseData","selection","_loadingOT","asyncToGenerator","regenerator_default","a","mark","_callee","temp","i","wrap","_context","prev","next","push","bible","setState","book_name","stop","_loagingNT","_callee2","_context2","_selectBook","event","n","target","id","_clearInput","bookName","_displayData","map","react_default","createElement","className","book_nr","key","onClick","_chapterVerse","onSubmit","_result","type","pattern","name","required","content","value","ddata","preventDefault","formData","FormData","cnum","Number","get","vsnum","venum","document","getElementById","alert","maxChapter","length","ar","values","maxVerse","keys","loaded","verseNum","verse","_words","tempV","index","style","color","fontWeight","_selectVerses","verseNumber","selectedVerse","_selectedCopy","str","element","String","textContent","el","innerHTML","pointerEvents","opacity","body","appendChild","window","getSelection","removeAllRanges","range","createRange","selectNode","addRange","execCommand","_copyData","copyText","querySelector","selectNodeContents","bind","assertThisInitialized","title","align","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d26def0a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport bible from \"./ko_ko.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    data: [],\n    book: 0,\n    chapter: 0,\n    verseS: 0,\n    verseE: 0,\n    view: false,\n    bookData: [],\n    verseData: [],\n    selection: []\n  };\n\n  constructor() {\n    super();\n    this._result = this._result.bind(this);\n  }\n\n  componentDidMount() {\n    document.title = \"바이블 검색 페이지\";\n  }\n\n  //구약 성경 불러와서 state data 갱신\n  _loadingOT = async () => {\n    let temp = [];\n    for (let i = 0; i < 39; ++i) {\n      temp.push(bible[i]);\n    }\n    this.setState({\n      data: temp,\n      book: 0,\n      chapter: 0,\n      verseS: 0,\n      verseE: 0,\n      view: false,\n      verseData: [],\n      book_name: null\n    });\n  };\n\n  //신약 성경 불러와서 state data 갱신\n  _loagingNT = async () => {\n    let temp = [];\n    for (let i = 39; i < 66; ++i) {\n      temp.push(bible[i]);\n    }\n    this.setState({\n      data: temp,\n      book: 0,\n      chapter: 0,\n      verseS: 0,\n      verseE: 0,\n      view: false,\n      verseData: []\n    });\n  };\n\n  //성경 선택하면 state에 성경 이름과 id를 갱신\n  _selectBook = event => {\n    let n = event.target.id;\n    if (n > 39) {\n      n = n - 40;\n    } else {\n      n = n - 1;\n    }\n\n    if (this.state.view) {\n      this._clearInput();\n    }\n    this.setState({\n      book: event.target.id,\n      bookName: this.state.data[n].book_name,\n      bookData: this.state.data[n],\n      view: false,\n      verseData: []\n    });\n  };\n\n  //구약, 신약 선택 후 각 성경 리스트 버튼으로 리턴\n  _displayData = () => {\n    const items = this.state.data.map(data => {\n      return (\n        <button\n          className=\"book\"\n          id={data.book_nr}\n          key={data.book_nr}\n          onClick={this._selectBook}\n        >\n          {data.book_name}\n        </button>\n      );\n    });\n    return items;\n  };\n\n  //성경을 선택하면 장, 절 입력 화면 출력\n  _chapterVerse = () => {\n    return (\n      <div>\n        <span id=\"bookinfo\">{this.state.bookName}</span>\n        <br />\n        <form onSubmit={this._result}>\n          <label>\n            <input\n              type=\"number\"\n              pattern=\"\\d*\"\n              name=\"chapterNum\"\n              id=\"chapterNum\"\n              required=\"required\"\n              content=\"user-scalable=no\"\n            />\n            장\n          </label>\n          <label>\n            <input\n              type=\"number\"\n              pattern=\"\\d*\"\n              name=\"verseStart\"\n              id=\"verseStart\"\n              content=\"user-scalable=no\"\n            />\n            절~\n          </label>\n          <label>\n            <input\n              type=\"number\"\n              pattern=\"\\d*\"\n              name=\"verseEnd\"\n              id=\"verseEnd\"\n              content=\"user-scalable=no\"\n            />\n            절\n          </label>\n          <input type=\"submit\" value=\"보기\" />\n        </form>\n      </div>\n    );\n  };\n\n  //입력 후 결과 화면 출력\n  _result = event => {\n    event.preventDefault();\n    let ddata;\n\n    //입력 form에서 입력 데이터 가져오기\n    let formData = new FormData(event.target);\n    ddata = this.state.bookData;\n\n    //입력화면에 있는 장, 시작 절, 끝 절 값 가져오기\n    let cnum = Number(formData.get(\"chapterNum\"));\n    let vsnum = Number(formData.get(\"verseStart\"));\n    let venum = Number(formData.get(\"verseEnd\"));\n\n    //절을 입력하지 않았을 시 장 전체 출력\n    if (\n      Number(formData.get(\"verseStart\")) === 0 &&\n      Number(formData.get(\"verseEnd\")) === 0\n    ) {\n      vsnum = 1;\n      document.getElementById(\"verseStart\").value = 1;\n      venum = 999;\n    }\n    //시작 절 부분만 입력시 해당 구절만 출력\n    else if (\n      Number(\n        formData.get(\"verseStart\") > 0 && Number(formData.get(\"verseEnd\")) === 0\n      )\n    ) {\n      venum = vsnum;\n      document.getElementById(\"verseEnd\").value = vsnum;\n    }\n\n    //입력이 올바르지 않을시 alert출력 및 값 재설정\n    if (cnum < 0) {\n      alert(\"올바르지 않은 입력입니다.\");\n      return;\n    }\n\n    //입력한 성경이 몇 장으로 이루어져있는지 정보 가져오기\n    let maxChapter = Number(ddata.book.length);\n    //입력한 장이 해당 성경의 장수보다 높으면 마지막 장을 출력하도록 갱신\n    if (cnum > maxChapter) {\n      cnum = maxChapter;\n      document.getElementById(\"chapterNum\").value = maxChapter;\n    }\n\n    //입력한 장이 몇 절로 이루어졌는지 정보 가져오기\n    //let maxVerse = Number(Object.keys(ddata.book[cnum-1]).length);\n    const obj = Object.values(ddata.book[cnum - 1]);\n    const ar = obj[0];\n    let maxVerse = Number(Object.keys(ar).length);\n    //입력이 올바르지 않을시 alert출력 및 값 재설정\n    if (vsnum <= 0 || vsnum > venum) {\n      alert(\"올바르지 않은 입력입니다.\");\n      return;\n    }\n\n    let loaded = [];\n\n    //입력한 절이 해당 장의 절수보다 높으면 마지막 절을 출력하도록 갱신\n    if (venum > maxVerse) {\n      venum = maxVerse;\n      document.getElementById(\"verseEnd\").value = maxVerse;\n    }\n    if (vsnum > maxVerse) {\n      vsnum = maxVerse;\n      document.getElementById(\"verseStart\").value = maxVerse;\n    }\n    let i = vsnum;\n    while (i <= venum) {\n      loaded.push({ verseNum: i, verse: Object.values(ar)[i - 1] });\n      i++;\n    }\n\n    //bible.json파일에 있는 data에서 필요한 구절들을 배열에 넣고 state에 갱신\n    this.setState({\n      chapter: cnum,\n      verseS: vsnum,\n      verseE: venum,\n      verseData: loaded,\n      view: true\n    });\n  };\n\n  //state에 있는 data를 div tag에 리턴\n  _words = () => {\n    let items = null;\n    if (this.state.verseData.length === 1) {\n      items = this.state.verseData.map(tempV => {\n        var index = Number(tempV.verseNum) * 1000;\n        return (\n          <p\n            key={index}\n            id={index}\n            style={{ color: \"black\", fontWeight: 400 }}\n            onClick={() => {\n              this._selectVerses(index);\n            }}\n          >\n            {tempV.verse}\n          </p>\n        );\n      });\n    } else {\n      items = this.state.verseData.map(tempV => {\n        var index = Number(tempV.verseNum) * 1000;\n        return (\n          <p\n            key={index}\n            id={index}\n            style={{ color: \"black\", fontWeight: 400 }}\n            onClick={() => {\n              this._selectVerses(index);\n            }}\n          >\n            {Number(tempV.verseNum)}. {tempV.verse}\n          </p>\n        );\n      });\n    }\n\n    return items;\n  };\n\n  //구절 선택시 폰트 변경\n  _selectVerses = verseNumber => {\n    var selectedVerse = document.getElementById(verseNumber);\n    if (selectedVerse.style.color === \"black\") {\n      selectedVerse.style.color = \"#003399\";\n      selectedVerse.style.fontWeight = 500;\n    } else {\n      selectedVerse.style.color = \"black\";\n      selectedVerse.style.fontWeight = 400;\n    }\n  };\n\n  //선택한 구절 클립보드에 복사\n  _selectedCopy = () => {\n    var str = \"\";\n    for (\n      var i = Number(this.state.verseS);\n      i <= Number(this.state.verseE);\n      ++i\n    ) {\n      var element = document.getElementById(i * 1000);\n      if (element.style.color !== \"black\") {\n        str = str + String(element.textContent) + \"\\n\";\n      }\n    }\n    str = str + (this.state.bookName + \" \" + this.state.chapter + \"장 KRV\");\n    var el = document.createElement(\"textarea\");\n    el.innerHTML = str;\n    el.style.pointerEvents = \"none\";\n    el.style.opacity = 0;\n    document.body.appendChild(el);\n    window.getSelection().removeAllRanges();\n    var range = document.createRange();\n    range.selectNode(el);\n    window.getSelection().addRange(range);\n    document.execCommand(\"copy\");\n    alert(\"클립보드에 복사 완료!\");\n  };\n\n  //출력된 구절 클립보드에 복사하기\n  _copyData = () => {\n    let copyText = document.querySelector(\".verseDisplay\");\n    let selection = window.getSelection();\n    let range = document.createRange();\n    range.selectNodeContents(copyText);\n    selection.removeAllRanges();\n    selection.addRange(range);\n    document.execCommand(\"Copy\");\n    alert(\"클립보드에 복사 완료!\");\n  };\n\n  _clearInput = () => {\n    document.getElementById(\"chapterNum\").value = null;\n    document.getElementById(\"verseStart\").value = null;\n    document.getElementById(\"verseEnd\").value = null;\n    for (\n      var i = Number(this.state.verseS);\n      i <= Number(this.state.verseE);\n      ++i\n    ) {\n      var element = document.getElementById(i * 1000);\n      if (element.style.color !== \"black\") {\n        element.style.color = \"black\";\n        element.style.fontWeight = 400;\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"AppDisplay\" align=\"center\">\n        <button id=\"ot\" onClick={this._loadingOT}>\n          구약\n        </button>\n        <button id=\"nt\" onClick={this._loagingNT}>\n          신약\n        </button>\n        <div className=\"books\">\n          {this.state.data.length !== 0 ? this._displayData() : null}\n          {this.state.book !== 0 ? this._chapterVerse() : null}\n          {this.state.book !== 0 ? (\n            <p id=\"lastinfo\" align=\"left\">\n              해당 장(절)보다 큰 수 입력시 마지막 장(절) 출력\n              <br />\n              예) 창세기 경우 50장 이므로 50보다 큰 수 입력시 50장이 입력됨.\n            </p>\n          ) : null}\n        </div>\n        {this.state.view ? (\n          <div>\n            <button id=\"copy\" onClick={this._copyData}>\n              전체복사\n            </button>\n            <button id=\"partedCopy\" onClick={this._selectedCopy}>\n              선택복사\n            </button>\n            <button id=\"clear\" onClick={this._clearInput}>\n              초기화\n            </button>\n          </div>\n        ) : null}\n        <br />\n        <div className=\"verseDisplay\" align=\"left\">\n          {this._words()}\n          {this.state.view && this.state.verseS !== this.state.verseE ? (\n            <p id=\"info\">\n              {this.state.bookName} {this.state.chapter}:{this.state.verseS}~\n              {this.state.verseE} KRV\n            </p>\n          ) : null}\n          {this.state.view && this.state.verseS === this.state.verseE ? (\n            <p id=\"info\">\n              {this.state.bookName} {this.state.chapter}:{this.state.verseS} KRV\n            </p>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}